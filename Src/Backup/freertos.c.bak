/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * Copyright (c) 2017 STMicroelectronics International N.V. 
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without 
  * modification, are permitted, provided that the following conditions are met:
  *
  * 1. Redistribution of source code must retain the above copyright notice, 
  *    this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright notice,
  *    this list of conditions and the following disclaimer in the documentation
  *    and/or other materials provided with the distribution.
  * 3. Neither the name of STMicroelectronics nor the names of other 
  *    contributors to this software may be used to endorse or promote products 
  *    derived from this software without specific written permission.
  * 4. This software, including modifications and/or derivative works of this 
  *    software, must execute solely and exclusively on microcontroller or
  *    microprocessor devices manufactured by or for STMicroelectronics.
  * 5. Redistribution and use of this software other than as permitted under 
  *    this license is void and will automatically terminate your rights under 
  *    this license. 
  *
  * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "cmsis_os.h"

/* USER CODE BEGIN Includes */     
#include "usart.h"
#include "motors.h"
#include "uart_structures.h"
/* USER CODE END Includes */

/* Variables -----------------------------------------------------------------*/
osThreadId defaultTaskHandle;
osThreadId Task02Handle;
osThreadId UartSendTaskHandle;

/* USER CODE BEGIN Variables */
extern uint8_t frameCplt;
extern To_STM_Motor_Speed s1;
extern char data[2];
char ramka[256];
int size;
int loop=40;

/* USER CODE END Variables */

/* Function prototypes -------------------------------------------------------*/
void StartDefaultTask(void const * argument);
void TaskFunction02(void const * argument);
void UartSendTaskFunction(void const * argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* USER CODE BEGIN FunctionPrototypes */

/* USER CODE END FunctionPrototypes */

/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */

}
/* USER CODE END 4 */

/* Init FreeRTOS */

void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* definition and creation of Task02 */
  osThreadDef(Task02, TaskFunction02, osPriorityNormal, 0, 128);
  Task02Handle = osThreadCreate(osThread(Task02), NULL);

  /* definition and creation of UartSendTask */
  osThreadDef(UartSendTask, UartSendTaskFunction, osPriorityBelowNormal, 0, 128);
  UartSendTaskHandle = osThreadCreate(osThread(UartSendTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
}

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {/*
	if (frameCplt){
		HAL_GPIO_TogglePin(R_A2_GPIO_Port, R_A2_Pin);
		frameCplt=0;
		if( s1.turnON == 1){
			//if (s1.speedL >=-100 && s1.speedL <= 100){ Left_F.speed = s1.speedL; Left_R.speed = s1.speedL;}
			//if (s1.speedR >=-100 && s1.speedR <= 100){ Right_F.speed = s1.speedR; Right_R.speed = s1.speedR;}
		}
		else{
			/*Left_F.speed = 0;
			Left_R.speed = 0;
			Right_F.speed = 0;
			Right_R.speed = 0;

			Left_F.speed = (int)data[0];
			Left_R.speed = (int)data[0];
			Right_F.speed = (int)data[1];
			Right_R.speed = (int)data[1];

		}
	}*/
    osDelay(1);
  }
  /* USER CODE END StartDefaultTask */
}

/* TaskFunction02 function */
void TaskFunction02(void const * argument)
{
  /* USER CODE BEGIN TaskFunction02 */
  /* Infinite loop */
  for(;;)
  {
	  //motor_Set_Speed_HW(&Left_F, &Left_R, &Right_F, &Right_R);
	  /*
	  TIM3->CCR1 = loop;
	  TIM3->CCR2 = loop;
	  TIM3->CCR3 = loop;
	  TIM3->CCR4 = loop;
	  vTaskDelay(10);
	  */
    osDelay(1);
  }
  /* USER CODE END TaskFunction02 */
}

/* UartSendTaskFunction function */
void UartSendTaskFunction(void const * argument)
{
  /* USER CODE BEGIN UartSendTaskFunction */
  /* Infinite loop */
  for(;;)
  {/*
	  //const char tab[] =  "Testowa ramka danych do wyslania\n\r";
	  //size = sprintf(ramka, "VLF1:%d | VLR:%d | VRF:%d | VRR:%d\n\r", Left_F.speed, Left_R.speed, Right_F.speed, Right_R.speed  );
	  //size = sprintf(ramka, "MTzero:%d | MTsto:%d | LTzero:%d | LTminsto:%d\n\r", MTzero, MTsto, LTzero, LTminsto  );
	  //size = sprintf(ramka, "CCR1:%d | CCR2:%d | CCR3:%d | CCR4:%d | L_A1:%d | L_A2:%d | R_A1:%d | R_A2:%d\n\r",
		//	  (int)htim3.Instance->CCR1, (int)htim3.Instance->CCR2, (int)htim3.Instance->CCR3, (int)htim3.Instance->CCR1, L_A1, L_A2, R_A1, R_A2  );
	  size = sprintf(ramka, "CCR1:%d | CCR2:%d | CCR3:%d | CCR4:%d | VLF1:%d | VLR:%d | VRF:%d | VRR:%d\r\n",
	  			  (int)htim3.Instance->CCR1, (int)htim3.Instance->CCR2, (int)htim3.Instance->CCR3, (int)htim3.Instance->CCR4, Left_F.speed, Left_R.speed, Right_F.speed, Right_R.speed  );
	  HAL_UART_Transmit_IT(&huart2,(uint8_t*) ramka, size);
	  //HAL_UART_Transmit_IT(&huart2,(uint8_t*) tab, sizeof(tab));

	  vTaskDelay(500);
	  */
    osDelay(1);
  }
  /* USER CODE END UartSendTaskFunction */
}

/* USER CODE BEGIN Application */
     
/* USER CODE END Application */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
